#!/bin/bash
if [ -d "/home/vagrant/jarbas/Project/" ] ; then
  . /home/vagrant/jarbas/Project/functions.sh
fi

if [ -d "/root/gpcn/xenserver/scripts/jarbas/Project/" ] ; then
  . /root/gpcn/xenserver/scripts/jarbas/Project/functions.sh
fi

if [ -d "/gpcn/atacado/scripts/jarbas/Project/" ] ; then
  . /gpcn/atacado/scripts/jarbas/Project/functions.sh
fi

if [ -d "/gpcn/monitorado/scripts/jarbas/Project/" ] ; then
  . /gpcn/monitorado/scripts/jarbas/Project/functions.sh
fi

if [ -d "/home/ubuntu/jarbas/Project/" ] ; then
  . /home/ubuntu/jarbas/Project/functions.sh
fi



# Se DER ERRO USAR O dos2unix: dos2unix -k -o "nome do arquivo"

# Declaração de constantes
numRodadas="30"

if [ -z $1 ]
then
  echo "FAZER AQUI MENU DE ARGS"
  echo "Versão: 0.1"
  exit 1 ;
fi

while [[ $# > 0 ]]
do
  key="$1"

  case $key in
    --configure)
    machineType="$2"
    case $machineType  in
      atacado)
        echo "Configurando Atacado"

        echo "Criando diretórios"
        sudo mkdir -p /gpcn/atacado/logs/collectl/
        sudo mkdir -p /gpcn/atacado/logs/netstat/
        sudo mkdir -p /gpcn/atacado/scripts/

        echo "Installing SSHPASS"
        sudo apt-get -y install sshpass > /dev/null
        sudo sed -i 's,PermitRootLogin without-password,PermitRootLogin yes,g' /etc/ssh/sshd_config
        sudo echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
        sudo service ssh restart
        sudo rm /home/vagrant/.ssh/known_hosts
        echo "Status SSHPASS:"
        sshpass -V

        echo "Installing build essentials"
        sudo apt-get -y update > /dev/null
        sudo apt-get -y upgrade > /dev/null
        sudo apt-get install -y build-essential > /dev/null

        echo "Installing Apache"
        sudo apt-get -y install apache2 > /dev/null
        echo "Status Apache:"
        apache2 -v

        echo "Installing Collectl"
        sudo apt-get -y install collectl > /dev/null
        echo "Status Collectl:"
        collectl --version

        echo "Installing Netstat"
        sudo apt-get -y install netstat-nat > /dev/null
        echo "Status Netstat:"
        netstat --version

        echo "Installing Stress-NG"
        sudo apt-get -y install stress-ng > /dev/null
        echo "Status Stress-ng:"
        stress-ng --version
        exit 1
        ;;
      master)
      echo "Configurando Master"
      break
      ;;
      atacante)
      echo "Configurando Atacante"
      break
      ;;
      cliente)
      echo "Configurando Cliente"
      break
      ;;
      figurantes)
      echo "Configurando Figurantes"
      break
      ;;
      hypervisor)
      echo "Configurando Hypervisor"
      break
      ;;
      *)
      echo "J.A.R.B.A.S LOG: Não digitou nenhum tipo da máquina." ; exit 1
    esac
    shift
    ;;

    run)
    if [ -z "$2" ]
    then
      echo "Executar o run com valores padrão."
      run $numRodadas
      exit 1;
    fi

    args="$2"
    case $args in
      -r| --rodadas)
      numRodadas="$3" #mover para dentro do else

      if [ -z "$numRodadas" ]
      then
        echo "J.A.R.B.A.S LOG: Argumento VAZIO depois de --rodadas (-r)" ; exit 1
      else
        run $numRodadas
      fi

      ;;

      check)
      checkArgs="$3"

      if [ -z "$checkArgs" ]
      then
        echo "J.A.R.B.A.S LOG: Argumento VAZIO depois do comando check" ; exit 1
      else

        case $checkArgs in

          ping)
          numClients="6"
          numSlaves="10"

          pingCheck $numClients $numSlaves

          #				pingArgs="$4"
          #
          #					if [ -z "$pingArgs" ]
          #					  then
          #					    numClients="10"
          #					    numSlaves="6"
          #					  else
          #						echo "PRECISA IMPLEMENTAR"
          #						case $pingArgs in
          #							-nc| --num-clients)
          #								numClients="$5"
          #
          #								if [ -z "$numClients" ]
          #								  then
          #								    numClients="10"
          #								fi
          #
          #								shift
          #
          #								;;
          #
          #							-ns| --num-slaves)
          #								numSlaves="$5"
          #
          #					if [ -z "$numSlaves" ]
          #					  then
          #					    numSlaves="6"
          #					fi
          #
          #		shift
          #		;;
          #	*)
          #		echo "J.A.R.B.A.S LOG: Argumento INVÁLIDO depois do comando --ping (-p)" ; exit 1
          #esac

          #fi

          ;;
          *)
          echo "J.A.R.B.A.S LOG: Argumento INVÁLIDO depois do comando check" ; exit 1
        esac
        shift
      fi

      ;;

      atacado)
      # echo "Me execute como atacado"
      numRodadas="$3"
      tipoDeExperimento="$4"
      durRodada="$5"

      runAtacado $numRodadas $tipoDeExperimento $durRodada
      ;;

      monitorado)
      # echo "Me execute como monitorado"
      numRodadas="$3"
      tipoDeExperimento="$4"
      durRodada="$5"

      runMonitorado $numRodadas $tipoDeExperimento $durRodada
      ;;

      cliente)
      # echo "Me execute como cliente"
      numRodadas="$3"
      tipoDeExperimento="$4"
      durRodada="$5"

      runCliente $numRodadas $tipoDeExperimento $durRodada
      ;;

      atacante)
      # echo "Me execute como atacante"
      numRodadas="$3"
      tipoDeExperimento="$4"
      durRodada="$5"

      runAtacante $numRodadas $tipoDeExperimento $durRodada
      ;;

      xenserver)
      # echo "Me execute como atacado"
      numRodadas="$3"
      tipoDeExperimento="$4"
      durRodada="$5"

      runXenServer $numRodadas $tipoDeExperimento $durRodada
      ;;

      *)
      echo "J.A.R.B.A.S LOG: Argumento INVÁLIDO depois do comando run" ; exit 1
    esac
    #shift
    break
    ;;

    *)
    echo "J.A.R.B.A.S LOG: Argumento INVÁLIDO" ; exit 1
    ;;
  esac
  shift
done
